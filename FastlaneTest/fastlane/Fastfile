# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.30.1"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  lane :testVersion do

    new_version = set_new_version()
    release_branch = ENV['HELLO']
      message = "Increment version number to #{new_version} .[skip ci]"
      commit_new_version(message, ENV['HELLO'])

      # reflect version number on develop
      sh "git checkout develop"
      sh "git pull origin develop"
      increment_version_name(app_folder_name: "app", version_name: new_version)
      commit_new_version(message, "develop")

       sh "git checkout #{release_branch}"
  end

  desc "Tag a build on GitHub"
  lane :tag do
    #sh "cp ../keys/${PROJECT}/* .."
    current_date = Time.now.strftime("%Y_%m_%d")
    new_version = get_version_name

    #sh "chmod +x ../keys/id_rsa"
    #sh "ssh-add ../keys/id_rsa"

    add_git_tag(tag: current_date + "_v" + new_version)

    sh "git push origin HEAD:#{ENV['HELLO']} --tags"
  end

  def commit_new_version(message, branch)
    git_commit(path: "app/build.gradle", message: message)
    sh "git push origin HEAD:#{branch}"
  end

  def set_new_version()
    last_tag_version = last_git_tag
    current_version = ENV['HELLO']
    version_array = current_version.split('/')[-1].split('.')

    new_version = 0
    minor_version = 0

    unless last_tag_version.nil?
      last_tag_version_array = last_tag_version.split('v')[-1].split('.')

      for i in 0..2
        if (version_array[i].to_i < last_tag_version_array[i].to_i)
          version_array = last_tag_version_array
          minor_version = version_array[-1].strip.to_i
          minor_version += 1
          break
        elsif version_array[i].to_i > last_tag_version_array[i].to_i
          minor_version = version_array[-1].strip.to_i
          break
        end
      end

      check = false
      for i in 0..2
        if (version_array[i].to_i == last_tag_version_array[i].to_i)
          check = true
        elsif version_array[i].to_i != last_tag_version_array[i].to_i
          check = false
          break
        end
      end

      if check == true
        version_array = last_tag_version_array
        minor_version = version_array[-1].strip.to_i
        minor_version += 1
      end

    else
      minor_version = version_array[-1].strip.to_i
    end

    version_array[-1] = minor_version
    new_version = version_array.join(".")

    # increment_version_code(app_folder_name: "app")
    increment_version_name(app_folder_name: "app", version_name: new_version)

    return new_version
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
